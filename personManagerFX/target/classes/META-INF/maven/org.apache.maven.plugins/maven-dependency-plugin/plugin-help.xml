<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.5 -->

<plugin>
  <name>Apache Maven Dependency Plugin</name>
  <description>Provides utility goals to work with dependencies like copying, unpacking, analyzing, resolving and many more.</description>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-dependency-plugin</artifactId>
  <version>3.1.2</version>
  <goalPrefix>dependency</goalPrefix>
  <mojos>
    <mojo>
      <goal>analyze</goal>
      <description>Analyzes the dependencies of this project and determines which are: used and declared; used and undeclared; unused and declared. This goal is intended to be used standalone, thus it always executes the test-compile phase - use the dependency:analyze-only goal instead when participating in the build lifecycle.
By default, maven-dependency-analyzer is used to perform the analysis, with limitations due to the fact that it works at bytecode level, but any analyzer can be plugged in through analyzer parameter.
</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>org.apache.maven.plugins.dependency.analyze.AnalyzeMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0-alpha-3</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>analyzer</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the project dependency analyzer to use (plexus component role-hint). By default, maven-dependency-analyzer is used. To use this, you must declare a dependency for this plugin that contains the code for the analyzer. The analyzer must have a declared Plexus role name, and you specify the role name here.</description>
        </parameter>
        <parameter>
          <name>failOnWarning</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to fail the build if a dependency warning is found.</description>
        </parameter>
        <parameter>
          <name>ignoredDependencies</name>
          <type>java.lang.String[]</type>
          <since>2.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies that will be ignored. Any dependency on this list will be excluded from the &apos;declared but unused&apos; and the &apos;used but undeclared&apos; list. The filter syntax is:
[groupId]:[artifactId]:[type]:[version]
where each pattern segment is optional and supports full and partial * wildcards. An empty pattern segment is treated as an implicit wildcard. *
For example, org.apache.* will match all artifacts whose group id starts with org.apache., and :::*-SNAPSHOT will match all snapshot artifacts.
</description>
        </parameter>
        <parameter>
          <name>ignoredUnusedDeclaredDependencies</name>
          <type>java.lang.String[]</type>
          <since>2.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies that will be ignored if they are declared but unused. The filter syntax is:
[groupId]:[artifactId]:[type]:[version]
where each pattern segment is optional and supports full and partial * wildcards. An empty pattern segment is treated as an implicit wildcard. *
For example, org.apache.* will match all artifacts whose group id starts with org.apache., and :::*-SNAPSHOT will match all snapshot artifacts.
</description>
        </parameter>
        <parameter>
          <name>ignoredUsedUndeclaredDependencies</name>
          <type>java.lang.String[]</type>
          <since>2.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies that will be ignored if they are used but undeclared. The filter syntax is:
[groupId]:[artifactId]:[type]:[version]
where each pattern segment is optional and supports full and partial * wildcards. An empty pattern segment is treated as an implicit wildcard. *
For example, org.apache.* will match all artifacts whose group id starts with org.apache., and :::*-SNAPSHOT will match all snapshot artifacts.
</description>
        </parameter>
        <parameter>
          <name>ignoreNonCompile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Ignore Runtime/Provided/Test/System scopes for unused dependency analysis.</description>
        </parameter>
        <parameter>
          <name>outputXML</name>
          <type>boolean</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output the xml for the missing dependencies (used but not declared).</description>
        </parameter>
        <parameter>
          <name>scriptableFlag</name>
          <type>java.lang.String</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to use for scriptable output.</description>
        </parameter>
        <parameter>
          <name>scriptableOutput</name>
          <type>boolean</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output scriptable values for the missing dependencies (used but not declared).</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>usedDependencies</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Force dependencies as used, to override incomplete result caused by bytecode-level analysis. Dependency format is groupId:artifactId.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output used dependencies.</description>
        </parameter>
      </parameters>
      <configuration>
        <analyzer implementation="java.lang.String" default-value="default">${analyzer}</analyzer>
        <failOnWarning implementation="boolean" default-value="false">${failOnWarning}</failOnWarning>
        <ignoreNonCompile implementation="boolean" default-value="false">${ignoreNonCompile}</ignoreNonCompile>
        <outputXML implementation="boolean" default-value="false">${outputXML}</outputXML>
        <scriptableFlag implementation="java.lang.String" default-value="$$$%%%">${scriptableFlag}</scriptableFlag>
        <scriptableOutput implementation="boolean" default-value="false">${scriptableOutput}</scriptableOutput>
        <skip implementation="boolean" default-value="false">${mdep.analyze.skip}</skip>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>analyze-dep-mgt</goal>
      <description>This mojo looks at the dependencies after final resolution and looks for mismatches in your dependencyManagement section. In versions of maven prior to 2.0.6, it was possible to inherit versions that didn&apos;t match your dependencyManagement. See MNG-1577 for more info. This mojo is also useful for just detecting projects that override the dependencyManagement directly. Set ignoreDirect to false to detect these otherwise normal conditions.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.dependency.analyze.AnalyzeDepMgt</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0-alpha-3</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>failBuild</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Fail the build if a problem is detected.</description>
        </parameter>
        <parameter>
          <name>ignoreDirect</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Ignore Direct Dependency Overrides of dependencyManagement section.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
      </parameters>
      <configuration>
        <failBuild implementation="boolean" default-value="false">${mdep.analyze.failBuild}</failBuild>
        <ignoreDirect implementation="boolean" default-value="true">${mdep.analyze.ignore.direct}</ignoreDirect>
        <skip implementation="boolean" default-value="false">${mdep.analyze.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>analyze-duplicate</goal>
      <description>Analyzes the &lt;dependencies/&gt; and &lt;dependencyManagement/&gt; tags in the pom.xml and determines the duplicate declared dependencies.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.dependency.analyze.AnalyzeDuplicateMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
      </parameters>
      <configuration>
        <skip implementation="boolean" default-value="false">${mdep.analyze.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>analyze-only</goal>
      <description>Analyzes the dependencies of this project and determines which are: used and declared; used and undeclared; unused and declared. This goal is intended to be used in the build lifecycle, thus it assumes that the test-compile phase has been executed - use the dependency:analyze goal instead when running standalone.
By default, maven-dependency-analyzer is used to perform the analysis, with limitations due to the fact that it works at bytecode level, but any analyzer can be plugged in through analyzer parameter.
</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>verify</phase>
      <implementation>org.apache.maven.plugins.dependency.analyze.AnalyzeOnlyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>analyzer</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the project dependency analyzer to use (plexus component role-hint). By default, maven-dependency-analyzer is used. To use this, you must declare a dependency for this plugin that contains the code for the analyzer. The analyzer must have a declared Plexus role name, and you specify the role name here.</description>
        </parameter>
        <parameter>
          <name>failOnWarning</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to fail the build if a dependency warning is found.</description>
        </parameter>
        <parameter>
          <name>ignoredDependencies</name>
          <type>java.lang.String[]</type>
          <since>2.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies that will be ignored. Any dependency on this list will be excluded from the &apos;declared but unused&apos; and the &apos;used but undeclared&apos; list. The filter syntax is:
[groupId]:[artifactId]:[type]:[version]
where each pattern segment is optional and supports full and partial * wildcards. An empty pattern segment is treated as an implicit wildcard. *
For example, org.apache.* will match all artifacts whose group id starts with org.apache., and :::*-SNAPSHOT will match all snapshot artifacts.
</description>
        </parameter>
        <parameter>
          <name>ignoredUnusedDeclaredDependencies</name>
          <type>java.lang.String[]</type>
          <since>2.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies that will be ignored if they are declared but unused. The filter syntax is:
[groupId]:[artifactId]:[type]:[version]
where each pattern segment is optional and supports full and partial * wildcards. An empty pattern segment is treated as an implicit wildcard. *
For example, org.apache.* will match all artifacts whose group id starts with org.apache., and :::*-SNAPSHOT will match all snapshot artifacts.
</description>
        </parameter>
        <parameter>
          <name>ignoredUsedUndeclaredDependencies</name>
          <type>java.lang.String[]</type>
          <since>2.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies that will be ignored if they are used but undeclared. The filter syntax is:
[groupId]:[artifactId]:[type]:[version]
where each pattern segment is optional and supports full and partial * wildcards. An empty pattern segment is treated as an implicit wildcard. *
For example, org.apache.* will match all artifacts whose group id starts with org.apache., and :::*-SNAPSHOT will match all snapshot artifacts.
</description>
        </parameter>
        <parameter>
          <name>ignoreNonCompile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Ignore Runtime/Provided/Test/System scopes for unused dependency analysis.</description>
        </parameter>
        <parameter>
          <name>outputXML</name>
          <type>boolean</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output the xml for the missing dependencies (used but not declared).</description>
        </parameter>
        <parameter>
          <name>scriptableFlag</name>
          <type>java.lang.String</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to use for scriptable output.</description>
        </parameter>
        <parameter>
          <name>scriptableOutput</name>
          <type>boolean</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output scriptable values for the missing dependencies (used but not declared).</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>usedDependencies</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Force dependencies as used, to override incomplete result caused by bytecode-level analysis. Dependency format is groupId:artifactId.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output used dependencies.</description>
        </parameter>
      </parameters>
      <configuration>
        <analyzer implementation="java.lang.String" default-value="default">${analyzer}</analyzer>
        <failOnWarning implementation="boolean" default-value="false">${failOnWarning}</failOnWarning>
        <ignoreNonCompile implementation="boolean" default-value="false">${ignoreNonCompile}</ignoreNonCompile>
        <outputXML implementation="boolean" default-value="false">${outputXML}</outputXML>
        <scriptableFlag implementation="java.lang.String" default-value="$$$%%%">${scriptableFlag}</scriptableFlag>
        <scriptableOutput implementation="boolean" default-value="false">${scriptableOutput}</scriptableOutput>
        <skip implementation="boolean" default-value="false">${mdep.analyze.skip}</skip>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>analyze-report</goal>
      <description>Analyzes the dependencies of this project and produces a report that summarizes which are: used and declared; used and undeclared; unused and declared.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>org.apache.maven.plugins.dependency.analyze.AnalyzeReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0-alpha-5</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>ignoreNonCompile</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Ignore Runtime/Provided/Test/System scopes for unused dependency analysis</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>usedDependencies</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Force dependencies as used, to override incomplete result caused by bytecode-level analysis. Dependency format is groupId:artifactId.</description>
        </parameter>
      </parameters>
      <configuration>
        <ignoreNonCompile implementation="boolean" default-value="false">${ignoreNonCompile}</ignoreNonCompile>
        <skip implementation="boolean" default-value="false">${mdep.analyze.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>build-classpath</goal>
      <description>This goal will output a classpath string of dependencies from the local repository to a file or log.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.apache.maven.plugins.dependency.fromDependencies.BuildClasspathMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0-alpha-2</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>attach</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach the classpath file to the main artifact so it can be installed and deployed.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classifier to look for. Example: sources</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupId Names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to exclude. An Empty string indicates no scopes (default).</description>
        </parameter>
        <parameter>
          <name>excludeTransitive</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should exclude transitive dependencies</description>
        </parameter>
        <parameter>
          <name>excludeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>fileSeparator</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Override the char used between the paths. This field is initialized to contain the first character of the value of the system property file.separator. On UNIX systems the value of this field is &apos;/&apos;; on Microsoft Windows systems it is &apos;\&apos;. The default is File.separator</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>ignore to set file permissions when unpacking a dependency</description>
        </parameter>
        <parameter>
          <name>includeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupIds to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to include. An Empty string indicates all scopes (default). The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom. In summary:
-	runtime scope gives runtime and compile dependencies,
-	compile scope gives compile, provided, and system dependencies,
-	test (default) scope gives all dependencies,
-	provided scope just gives provided dependencies,
-	system scope just gives system dependencies.
</description>
        </parameter>
        <parameter>
          <name>includeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>localRepoProperty</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The value will be forced to &apos;${M2_REPO}&apos; if no value is provided AND the attach flag is true.</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The file to write the classpath string. If undefined, it just prints the classpath as [INFO].</description>
        </parameter>
        <parameter>
          <name>outputFilterFile</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Write out the classpath in a format compatible with filtering (classpath=xxxxx)</description>
        </parameter>
        <parameter>
          <name>outputProperty</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A property to set to the content of the classpath string.</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite artifacts that don&apos;t exist or are older than the source.</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>pathSeparator</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Override the char used between path folders. The system-dependent path-separator character. This field is initialized to contain the first character of the value of the system property path.separator. This character is used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is &apos;:&apos;; on Microsoft Windows systems it is &apos;;&apos;.</description>
        </parameter>
        <parameter>
          <name>prefix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the local repository (the stripVersion parameter does nothing then).</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend the groupId during copy.</description>
        </parameter>
        <parameter>
          <name>regenerateFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If &apos;true&apos;, it skips the up-to-date-check, and always regenerates the classpath file.</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>stripClassifier</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Strip artifact classifier during copy (only works if prefix is set)</description>
        </parameter>
        <parameter>
          <name>stripVersion</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Strip artifact version during copy (only works if prefix is set)</description>
        </parameter>
        <parameter>
          <name>type</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type to look for when constructing artifact based on classifier. Example: java-source,jar,war</description>
        </parameter>
        <parameter>
          <name>useBaseVersion</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Either append the artifact&apos;s baseVersion or uniqueVersion to the filename. Will only be used if isStripVersion() is false.</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
since 2.6 is on by default</description>
        </parameter>
      </parameters>
      <configuration>
        <attach implementation="boolean" default-value="false"/>
        <classifier implementation="java.lang.String" default-value="">${classifier}</classifier>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeClassifiers implementation="java.lang.String" default-value="">${excludeClassifiers}</excludeClassifiers>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <excludeScope implementation="java.lang.String" default-value="">${excludeScope}</excludeScope>
        <excludeTransitive implementation="boolean" default-value="false">${excludeTransitive}</excludeTransitive>
        <excludeTypes implementation="java.lang.String" default-value="">${excludeTypes}</excludeTypes>
        <fileSeparator implementation="java.lang.String" default-value="">${mdep.fileSeparator}</fileSeparator>
        <ignorePermissions implementation="boolean" default-value="false">${dependency.ignorePermissions}</ignorePermissions>
        <includeArtifactIds implementation="java.lang.String" default-value="">${includeArtifactIds}</includeArtifactIds>
        <includeClassifiers implementation="java.lang.String" default-value="">${includeClassifiers}</includeClassifiers>
        <includeGroupIds implementation="java.lang.String" default-value="">${includeGroupIds}</includeGroupIds>
        <includeScope implementation="java.lang.String" default-value="">${includeScope}</includeScope>
        <includeTypes implementation="java.lang.String" default-value="">${includeTypes}</includeTypes>
        <localRepoProperty implementation="java.lang.String" default-value="">${mdep.localRepoProperty}</localRepoProperty>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers">${markersDirectory}</markersDirectory>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputFile implementation="java.io.File">${mdep.outputFile}</outputFile>
        <outputFilterFile implementation="boolean" default-value="false">${mdep.outputFilterFile}</outputFilterFile>
        <outputProperty implementation="java.lang.String">${mdep.outputProperty}</outputProperty>
        <overWriteIfNewer implementation="boolean" default-value="true">${overWriteIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${overWriteSnapshots}</overWriteSnapshots>
        <pathSeparator implementation="java.lang.String" default-value="">${mdep.pathSeparator}</pathSeparator>
        <prefix implementation="java.lang.String">${mdep.prefix}</prefix>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <regenerateFile implementation="boolean" default-value="false">${mdep.regenerateFile}</regenerateFile>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <stripClassifier implementation="boolean" default-value="false">${mdep.stripClassifier}</stripClassifier>
        <stripVersion implementation="boolean" default-value="false">${mdep.stripVersion}</stripVersion>
        <type implementation="java.lang.String" default-value="">${type}</type>
        <useBaseVersion implementation="boolean" default-value="true">${mdep.useBaseVersion}</useBaseVersion>
        <useJvmChmod implementation="boolean" default-value="true">${dependency.useJvmChmod}</useJvmChmod>
      </configuration>
    </mojo>
    <mojo>
      <goal>collect</goal>
      <description>Goal that collects the project dependencies from the repository. This goal requires Maven 3.0 or higher to function because it uses &apos;requiresDependencyCollection&apos;. This means that it lists the groupId:artifactId:version information by downloading the pom files without downloading the actual artifacts such as jar files.

This is very useful when full dependency resolution might fail due to projects which haven&apos;t been built yet.

It is identical to ResolveDependenciesMojo except for using the requiresDependencyCollection annotation attribute instead of requiresDependencyResolution.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.apache.maven.plugins.dependency.resolvers.CollectDependenciesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>3.0</since>
      <requiresDependencyCollection>test</requiresDependencyCollection>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>appendOutput</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to append outputs into the output file or overwrite it.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classifier to look for. Example: sources</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupId Names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeReactor</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t resolve plugins that are in the current reactor.</description>
        </parameter>
        <parameter>
          <name>excludeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to exclude. An Empty string indicates no scopes (default).</description>
        </parameter>
        <parameter>
          <name>excludeTransitive</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should exclude transitive dependencies</description>
        </parameter>
        <parameter>
          <name>excludeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
        <parameter>
          <name>includeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupIds to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeParents</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include parent poms in the dependency resolution list.</description>
        </parameter>
        <parameter>
          <name>includeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to include. An Empty string indicates all scopes (default). The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom. In summary:
-	runtime scope gives runtime and compile dependencies,
-	compile scope gives compile, provided, and system dependencies,
-	test (default) scope gives all dependencies,
-	provided scope just gives provided dependencies,
-	system scope just gives system dependencies.
</description>
        </parameter>
        <parameter>
          <name>includeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If specified, this parameter will cause the dependencies to be written to the path specified, instead of writing to the console.</description>
        </parameter>
        <parameter>
          <name>outputScope</name>
          <type>boolean</type>
          <since>2.0-alpha-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should display the scope when resolving</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite artifacts that don&apos;t exist or are older than the source.</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend the groupId during copy.</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>sort</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sort the output list of resolved artifacts alphabetically. The default ordering matches the classpath order.</description>
        </parameter>
        <parameter>
          <name>type</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type to look for when constructing artifact based on classifier. Example: java-source,jar,war</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
      </parameters>
      <configuration>
        <appendOutput implementation="boolean" default-value="false">${appendOutput}</appendOutput>
        <classifier implementation="java.lang.String" default-value="">${classifier}</classifier>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeClassifiers implementation="java.lang.String" default-value="">${excludeClassifiers}</excludeClassifiers>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <excludeReactor implementation="boolean" default-value="true">${excludeReactor}</excludeReactor>
        <excludeScope implementation="java.lang.String" default-value="">${excludeScope}</excludeScope>
        <excludeTransitive implementation="boolean" default-value="false">${excludeTransitive}</excludeTransitive>
        <excludeTypes implementation="java.lang.String" default-value="">${excludeTypes}</excludeTypes>
        <includeArtifactIds implementation="java.lang.String" default-value="">${includeArtifactIds}</includeArtifactIds>
        <includeClassifiers implementation="java.lang.String" default-value="">${includeClassifiers}</includeClassifiers>
        <includeGroupIds implementation="java.lang.String" default-value="">${includeGroupIds}</includeGroupIds>
        <includeParents implementation="boolean" default-value="false">${includeParents}</includeParents>
        <includeScope implementation="java.lang.String" default-value="">${includeScope}</includeScope>
        <includeTypes implementation="java.lang.String" default-value="">${includeTypes}</includeTypes>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers">${markersDirectory}</markersDirectory>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputFile implementation="java.io.File">${outputFile}</outputFile>
        <outputScope implementation="boolean" default-value="true">${mdep.outputScope}</outputScope>
        <overWriteIfNewer implementation="boolean" default-value="true">${overWriteIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${overWriteSnapshots}</overWriteSnapshots>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <sort implementation="boolean" default-value="false">${sort}</sort>
        <type implementation="java.lang.String" default-value="">${type}</type>
      </configuration>
    </mojo>
    <mojo>
      <goal>copy</goal>
      <description>Goal that copies a list of artifacts from the repository to defined locations.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-sources</phase>
      <implementation>org.apache.maven.plugins.dependency.fromConfiguration.CopyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>artifact</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The artifact to copy from command line. A string of the form groupId:artifactId:version[:packaging[:classifier]]. Use artifactItems within the POM configuration.</description>
        </parameter>
        <parameter>
          <name>artifactItems</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of ArtifactItems to work on. (ArtifactItem contains groupId, artifactId, version, type, classifier, outputDirectory, destFileName, overWrite and encoding.) See Usage for details.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
        <parameter>
          <name>localRepositoryDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Path to override default local repository during plugin&apos;s execution. To remove all downloaded artifacts as part of the build, set this value to a location under your project&apos;s target directory</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Default output location used for mojo, unless overridden in ArtifactItem.</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite if newer</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend artifact groupId during copy</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>stripClassifier</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Strip artifact classifier during copy</description>
        </parameter>
        <parameter>
          <name>stripVersion</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Strip artifact version during copy</description>
        </parameter>
        <parameter>
          <name>useBaseVersion</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Use artifact baseVersion during copy</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
      </parameters>
      <configuration>
        <artifact implementation="java.lang.String">${artifact}</artifact>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency">${outputDirectory}</outputDirectory>
        <overWriteIfNewer implementation="boolean" default-value="true">${mdep.overIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${mdep.overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${mdep.overWriteSnapshots}</overWriteSnapshots>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <stripClassifier implementation="boolean" default-value="false">${mdep.stripClassifier}</stripClassifier>
        <stripVersion implementation="boolean" default-value="false">${mdep.stripVersion}</stripVersion>
        <useBaseVersion implementation="boolean" default-value="false">${mdep.useBaseVersion}</useBaseVersion>
      </configuration>
    </mojo>
    <mojo>
      <goal>copy-dependencies</goal>
      <description>Goal that copies the project dependencies from the repository to a defined location.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-sources</phase>
      <implementation>org.apache.maven.plugins.dependency.fromDependencies.CopyDependenciesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addParentPoms</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add parent poms to the list of copied dependencies (both current project pom parents and dependencies parents).</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classifier to look for. Example: sources</description>
        </parameter>
        <parameter>
          <name>copyPom</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Also copy the pom of each artifact.</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupId Names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to exclude. An Empty string indicates no scopes (default).</description>
        </parameter>
        <parameter>
          <name>excludeTransitive</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should exclude transitive dependencies</description>
        </parameter>
        <parameter>
          <name>excludeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>failOnMissingClassifierArtifact</name>
          <type>boolean</type>
          <since>2.0-alpha-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>This only applies if the classifier parameter is used.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
        <parameter>
          <name>includeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupIds to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to include. An Empty string indicates all scopes (default). The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom. In summary:
-	runtime scope gives runtime and compile dependencies,
-	compile scope gives compile, provided, and system dependencies,
-	test (default) scope gives all dependencies,
-	provided scope just gives provided dependencies,
-	system scope just gives system dependencies.
</description>
        </parameter>
        <parameter>
          <name>includeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output location.</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite artifacts that don&apos;t exist or are older than the source.</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend the groupId during copy.</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>stripClassifier</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Strip artifact classifier during copy</description>
        </parameter>
        <parameter>
          <name>stripVersion</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Strip artifact version during copy</description>
        </parameter>
        <parameter>
          <name>type</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type to look for when constructing artifact based on classifier. Example: java-source,jar,war</description>
        </parameter>
        <parameter>
          <name>useBaseVersion</name>
          <type>boolean</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Either append the artifact&apos;s baseVersion or uniqueVersion to the filename. Will only be used if isStripVersion() is false.</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
        <parameter>
          <name>useRepositoryLayout</name>
          <type>boolean</type>
          <since>2.0-alpha-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Place each artifact in the same directory layout as a default repository.

example:

  /outputDirectory/junit/junit/3.8.1/junit-3.8.1.jar
</description>
        </parameter>
        <parameter>
          <name>useSubDirectoryPerArtifact</name>
          <type>boolean</type>
          <since>2.0-alpha-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Place each file in a separate subdirectory. (example /outputDirectory/junit-3.8.1-jar)</description>
        </parameter>
        <parameter>
          <name>useSubDirectoryPerScope</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Place each type of file in a separate subdirectory. (example /outputDirectory/runtime /outputDirectory/provided etc)</description>
        </parameter>
        <parameter>
          <name>useSubDirectoryPerType</name>
          <type>boolean</type>
          <since>2.0-alpha-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Place each type of file in a separate subdirectory. (example /outputDirectory/jars /outputDirectory/wars etc)</description>
        </parameter>
      </parameters>
      <configuration>
        <addParentPoms implementation="boolean" default-value="false">${mdep.addParentPoms}</addParentPoms>
        <classifier implementation="java.lang.String" default-value="">${classifier}</classifier>
        <copyPom implementation="boolean" default-value="false">${mdep.copyPom}</copyPom>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeClassifiers implementation="java.lang.String" default-value="">${excludeClassifiers}</excludeClassifiers>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <excludeScope implementation="java.lang.String" default-value="">${excludeScope}</excludeScope>
        <excludeTransitive implementation="boolean" default-value="false">${excludeTransitive}</excludeTransitive>
        <excludeTypes implementation="java.lang.String" default-value="">${excludeTypes}</excludeTypes>
        <failOnMissingClassifierArtifact implementation="boolean" default-value="false">${mdep.failOnMissingClassifierArtifact}</failOnMissingClassifierArtifact>
        <includeArtifactIds implementation="java.lang.String" default-value="">${includeArtifactIds}</includeArtifactIds>
        <includeClassifiers implementation="java.lang.String" default-value="">${includeClassifiers}</includeClassifiers>
        <includeGroupIds implementation="java.lang.String" default-value="">${includeGroupIds}</includeGroupIds>
        <includeScope implementation="java.lang.String" default-value="">${includeScope}</includeScope>
        <includeTypes implementation="java.lang.String" default-value="">${includeTypes}</includeTypes>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers">${markersDirectory}</markersDirectory>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency">${outputDirectory}</outputDirectory>
        <overWriteIfNewer implementation="boolean" default-value="true">${overWriteIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${overWriteSnapshots}</overWriteSnapshots>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <stripClassifier implementation="boolean" default-value="false">${mdep.stripClassifier}</stripClassifier>
        <stripVersion implementation="boolean" default-value="false">${mdep.stripVersion}</stripVersion>
        <type implementation="java.lang.String" default-value="">${type}</type>
        <useBaseVersion implementation="boolean" default-value="true">${mdep.useBaseVersion}</useBaseVersion>
        <useRepositoryLayout implementation="boolean" default-value="false">${mdep.useRepositoryLayout}</useRepositoryLayout>
        <useSubDirectoryPerArtifact implementation="boolean" default-value="false">${mdep.useSubDirectoryPerArtifact}</useSubDirectoryPerArtifact>
        <useSubDirectoryPerScope implementation="boolean" default-value="false">${mdep.useSubDirectoryPerScope}</useSubDirectoryPerScope>
        <useSubDirectoryPerType implementation="boolean" default-value="false">${mdep.useSubDirectoryPerType}</useSubDirectoryPerType>
      </configuration>
    </mojo>
    <mojo>
      <goal>display-ancestors</goal>
      <description>Displays all ancestor POMs of the project. This may be useful in a continuous integration system where you want to know all parent poms of the project.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>validate</phase>
      <implementation>org.apache.maven.plugins.dependency.DisplayAncestorsMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.9</since>
      <threadSafe>true</threadSafe>
      <parameters/>
    </mojo>
    <mojo>
      <goal>get</goal>
      <description>Resolves a single artifact, eventually transitively, from the specified remote repositories. Caveat: will always check the central repository defined in the super pom. You could use a mirror entry in your settings.xml</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.dependency.GetMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>artifact</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A string of the form groupId:artifactId:version[:packaging[:classifier]].</description>
        </parameter>
        <parameter>
          <name>artifactId</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The artifactId of the artifact to download. Ignored if artifact is used.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>The classifier of the artifact to download. Ignored if artifact is used.</description>
        </parameter>
        <parameter>
          <name>groupId</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The groupId of the artifact to download. Ignored if artifact is used.</description>
        </parameter>
        <parameter>
          <name>packaging</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The packaging of the artifact to download. Ignored if artifact is used.</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Repositories in the format id::[layout]::url or just url, separated by comma. ie. central::default::https://repo.maven.apache.org/maven2,myrepo::::https://repo.acme.com,https://repo.acme2.com</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>transitive</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Download transitively, retrieving the specified artifact and all of its dependencies.</description>
        </parameter>
        <parameter>
          <name>version</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The version of the artifact to download. Ignored if artifact is used.</description>
        </parameter>
      </parameters>
      <configuration>
        <artifact implementation="java.lang.String">${artifact}</artifact>
        <artifactId implementation="java.lang.String">${artifactId}</artifactId>
        <classifier implementation="java.lang.String">${classifier}</classifier>
        <groupId implementation="java.lang.String">${groupId}</groupId>
        <packaging implementation="java.lang.String" default-value="jar">${packaging}</packaging>
        <remoteRepositories implementation="java.lang.String">${remoteRepositories}</remoteRepositories>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <transitive implementation="boolean" default-value="true">${transitive}</transitive>
        <version implementation="java.lang.String">${version}</version>
      </configuration>
    </mojo>
    <mojo>
      <goal>go-offline</goal>
      <description>Goal that resolves all project dependencies, including plugins and reports and their dependencies. Brian Fox</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.dependency.resolvers.GoOfflineMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>appendOutput</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to append outputs into the output file or overwrite it.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classifier to look for. Example: sources</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupId Names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeReactor</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t resolve plugins that are in the current reactor.</description>
        </parameter>
        <parameter>
          <name>excludeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to exclude. An Empty string indicates no scopes (default).</description>
        </parameter>
        <parameter>
          <name>excludeTransitive</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should exclude transitive dependencies</description>
        </parameter>
        <parameter>
          <name>excludeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
        <parameter>
          <name>includeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupIds to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to include. An Empty string indicates all scopes (default). The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom. In summary:
-	runtime scope gives runtime and compile dependencies,
-	compile scope gives compile, provided, and system dependencies,
-	test (default) scope gives all dependencies,
-	provided scope just gives provided dependencies,
-	system scope just gives system dependencies.
</description>
        </parameter>
        <parameter>
          <name>includeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If specified, this parameter will cause the dependencies to be written to the path specified, instead of writing to the console.</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite artifacts that don&apos;t exist or are older than the source.</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend the groupId during copy.</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>type</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type to look for when constructing artifact based on classifier. Example: java-source,jar,war</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
      </parameters>
      <configuration>
        <appendOutput implementation="boolean" default-value="false">${appendOutput}</appendOutput>
        <classifier implementation="java.lang.String" default-value="">${classifier}</classifier>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeClassifiers implementation="java.lang.String" default-value="">${excludeClassifiers}</excludeClassifiers>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <excludeReactor implementation="boolean" default-value="true">${excludeReactor}</excludeReactor>
        <excludeScope implementation="java.lang.String" default-value="">${excludeScope}</excludeScope>
        <excludeTransitive implementation="boolean" default-value="false">${excludeTransitive}</excludeTransitive>
        <excludeTypes implementation="java.lang.String" default-value="">${excludeTypes}</excludeTypes>
        <includeArtifactIds implementation="java.lang.String" default-value="">${includeArtifactIds}</includeArtifactIds>
        <includeClassifiers implementation="java.lang.String" default-value="">${includeClassifiers}</includeClassifiers>
        <includeGroupIds implementation="java.lang.String" default-value="">${includeGroupIds}</includeGroupIds>
        <includeScope implementation="java.lang.String" default-value="">${includeScope}</includeScope>
        <includeTypes implementation="java.lang.String" default-value="">${includeTypes}</includeTypes>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers">${markersDirectory}</markersDirectory>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputFile implementation="java.io.File">${outputFile}</outputFile>
        <overWriteIfNewer implementation="boolean" default-value="true">${overWriteIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${overWriteSnapshots}</overWriteSnapshots>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <type implementation="java.lang.String" default-value="">${type}</type>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on maven-dependency-plugin.
Call mvn dependency:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.dependency.resolvers.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>list</goal>
      <description>Displays the list of dependencies for this project.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.dependency.resolvers.ListMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0-alpha-5</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>appendOutput</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to append outputs into the output file or overwrite it.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classifier to look for. Example: sources</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupId Names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeReactor</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t resolve plugins that are in the current reactor.</description>
        </parameter>
        <parameter>
          <name>excludeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to exclude. An Empty string indicates no scopes (default).</description>
        </parameter>
        <parameter>
          <name>excludeTransitive</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should exclude transitive dependencies</description>
        </parameter>
        <parameter>
          <name>excludeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
        <parameter>
          <name>includeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupIds to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeParents</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include parent poms in the dependency resolution list.</description>
        </parameter>
        <parameter>
          <name>includeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to include. An Empty string indicates all scopes (default). The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom. In summary:
-	runtime scope gives runtime and compile dependencies,
-	compile scope gives compile, provided, and system dependencies,
-	test (default) scope gives all dependencies,
-	provided scope just gives provided dependencies,
-	system scope just gives system dependencies.
</description>
        </parameter>
        <parameter>
          <name>includeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If specified, this parameter will cause the dependencies to be written to the path specified, instead of writing to the console.</description>
        </parameter>
        <parameter>
          <name>outputScope</name>
          <type>boolean</type>
          <since>2.0-alpha-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should display the scope when resolving</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite artifacts that don&apos;t exist or are older than the source.</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend the groupId during copy.</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>sort</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sort the output list of resolved artifacts alphabetically. The default ordering matches the classpath order.</description>
        </parameter>
        <parameter>
          <name>type</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type to look for when constructing artifact based on classifier. Example: java-source,jar,war</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
      </parameters>
      <configuration>
        <appendOutput implementation="boolean" default-value="false">${appendOutput}</appendOutput>
        <classifier implementation="java.lang.String" default-value="">${classifier}</classifier>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeClassifiers implementation="java.lang.String" default-value="">${excludeClassifiers}</excludeClassifiers>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <excludeReactor implementation="boolean" default-value="true">${excludeReactor}</excludeReactor>
        <excludeScope implementation="java.lang.String" default-value="">${excludeScope}</excludeScope>
        <excludeTransitive implementation="boolean" default-value="false">${excludeTransitive}</excludeTransitive>
        <excludeTypes implementation="java.lang.String" default-value="">${excludeTypes}</excludeTypes>
        <includeArtifactIds implementation="java.lang.String" default-value="">${includeArtifactIds}</includeArtifactIds>
        <includeClassifiers implementation="java.lang.String" default-value="">${includeClassifiers}</includeClassifiers>
        <includeGroupIds implementation="java.lang.String" default-value="">${includeGroupIds}</includeGroupIds>
        <includeParents implementation="boolean" default-value="false">${includeParents}</includeParents>
        <includeScope implementation="java.lang.String" default-value="">${includeScope}</includeScope>
        <includeTypes implementation="java.lang.String" default-value="">${includeTypes}</includeTypes>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers">${markersDirectory}</markersDirectory>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputFile implementation="java.io.File">${outputFile}</outputFile>
        <outputScope implementation="boolean" default-value="true">${mdep.outputScope}</outputScope>
        <overWriteIfNewer implementation="boolean" default-value="true">${overWriteIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${overWriteSnapshots}</overWriteSnapshots>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <sort implementation="boolean" default-value="false">${sort}</sort>
        <type implementation="java.lang.String" default-value="">${type}</type>
      </configuration>
    </mojo>
    <mojo>
      <goal>list-repositories</goal>
      <description>Goal that resolves all project dependencies and then lists the repositories used by the build and by the transitive dependencies</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.dependency.resolvers.ListRepositoriesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.2</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>ignore to set file permissions when unpacking a dependency</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
since 2.6 is on by default</description>
        </parameter>
      </parameters>
      <configuration>
        <ignorePermissions implementation="boolean" default-value="false">${dependency.ignorePermissions}</ignorePermissions>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <useJvmChmod implementation="boolean" default-value="true">${dependency.useJvmChmod}</useJvmChmod>
      </configuration>
    </mojo>
    <mojo>
      <goal>properties</goal>
      <description>Goal that sets a property pointing to the artifact file for each project dependency. For each dependency (direct and transitive) a project property will be set which follows the groupId:artifactId:type:[classifier] form and contains the path to the resolved artifact.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>initialize</phase>
      <implementation>org.apache.maven.plugins.dependency.PropertiesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.2</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
      </parameters>
      <configuration>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>purge-local-repository</goal>
      <description>When run on a project, remove the project dependencies from the local repository, and optionally re-resolve them. Outside of a project, remove the manually given dependencies.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.dependency.PurgeLocalRepositoryMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>actTransitively</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether this mojo should act on all transitive dependencies. Default value is true.</description>
        </parameter>
        <parameter>
          <name>exclude</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma-separated list of groupId:artifactId entries, which should be used to exclude artifacts from deletion/refresh. This is a command-line alternative to the excludes parameter, since List parameters are not currently compatible with CLI specification.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of dependencies in the form of groupId:artifactId which should NOT be deleted/refreshed.</description>
        </parameter>
        <parameter>
          <name>include</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma-separated list of groupId:artifactId entries, which should be used to include artifacts for deletion/refresh. This is a command-line alternative to the includes parameter, since List parameters are not currently compatible with CLI specification.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>The list of dependencies in the form of groupId:artifactId which should BE deleted/refreshed.</description>
        </parameter>
        <parameter>
          <name>manualInclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma-separated list of groupId:artifactId entries, which should be used to manually include artifacts for deletion. This is a command-line alternative to the manualIncludes parameter, since List parameters are not currently compatible with CLI specification.</description>
        </parameter>
        <parameter>
          <name>manualIncludes</name>
          <type>java.util.List</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>The list of dependencies in the form of groupId:artifactId which should BE deleted/purged from the local repository. Note that using this parameter will deactivate the normal process for purging the current project dependency tree. If this parameter is used, only the included artifacts will be purged. The manualIncludes parameter should not be used in combination with the includes/excludes parameters.</description>
        </parameter>
        <parameter>
          <name>reResolve</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to re-resolve the artifacts once they have been deleted from the local repository. If you are running this mojo from the command-line, you may want to disable this. By default, artifacts will be re-resolved.</description>
        </parameter>
        <parameter>
          <name>resolutionFuzziness</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Determines how liberally the plugin will delete an artifact from the local repository. Values are:

-	file - Eliminate only the artifact&apos;s file.
-	version (default) - Eliminate all files associated with the version of the artifact.
-	artifactId - Eliminate all files associated with the artifact&apos;s artifactId.
-	groupId - Eliminate all files associated with the artifact&apos;s groupId.
</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>snapshotsOnly</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to purge only snapshot artifacts.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether this plugin should output verbose messages. Default is false.</description>
        </parameter>
      </parameters>
      <configuration>
        <actTransitively implementation="boolean" default-value="true">${actTransitively}</actTransitively>
        <exclude implementation="java.lang.String">${exclude}</exclude>
        <include implementation="java.lang.String">${include}</include>
        <manualInclude implementation="java.lang.String">${manualInclude}</manualInclude>
        <reResolve implementation="boolean" default-value="true">${reResolve}</reResolve>
        <resolutionFuzziness implementation="java.lang.String" default-value="version">${resolutionFuzziness}</resolutionFuzziness>
        <skip implementation="boolean" default-value="false">${skip}</skip>
        <snapshotsOnly implementation="boolean" default-value="false">${snapshotsOnly}</snapshotsOnly>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>resolve</goal>
      <description>Goal that resolves the project dependencies from the repository. When using this goal while running on Java 9 the module names will be visible as well.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.apache.maven.plugins.dependency.resolvers.ResolveDependenciesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>appendOutput</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to append outputs into the output file or overwrite it.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classifier to look for. Example: sources</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupId Names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeReactor</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t resolve plugins that are in the current reactor.</description>
        </parameter>
        <parameter>
          <name>excludeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to exclude. An Empty string indicates no scopes (default).</description>
        </parameter>
        <parameter>
          <name>excludeTransitive</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should exclude transitive dependencies</description>
        </parameter>
        <parameter>
          <name>excludeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
        <parameter>
          <name>includeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupIds to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeParents</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include parent poms in the dependency resolution list.</description>
        </parameter>
        <parameter>
          <name>includeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to include. An Empty string indicates all scopes (default). The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom. In summary:
-	runtime scope gives runtime and compile dependencies,
-	compile scope gives compile, provided, and system dependencies,
-	test (default) scope gives all dependencies,
-	provided scope just gives provided dependencies,
-	system scope just gives system dependencies.
</description>
        </parameter>
        <parameter>
          <name>includeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If specified, this parameter will cause the dependencies to be written to the path specified, instead of writing to the console.</description>
        </parameter>
        <parameter>
          <name>outputScope</name>
          <type>boolean</type>
          <since>2.0-alpha-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should display the scope when resolving</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite artifacts that don&apos;t exist or are older than the source.</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend the groupId during copy.</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>sort</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sort the output list of resolved artifacts alphabetically. The default ordering matches the classpath order.</description>
        </parameter>
        <parameter>
          <name>type</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type to look for when constructing artifact based on classifier. Example: java-source,jar,war</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
      </parameters>
      <configuration>
        <appendOutput implementation="boolean" default-value="false">${appendOutput}</appendOutput>
        <classifier implementation="java.lang.String" default-value="">${classifier}</classifier>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeClassifiers implementation="java.lang.String" default-value="">${excludeClassifiers}</excludeClassifiers>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <excludeReactor implementation="boolean" default-value="true">${excludeReactor}</excludeReactor>
        <excludeScope implementation="java.lang.String" default-value="">${excludeScope}</excludeScope>
        <excludeTransitive implementation="boolean" default-value="false">${excludeTransitive}</excludeTransitive>
        <excludeTypes implementation="java.lang.String" default-value="">${excludeTypes}</excludeTypes>
        <includeArtifactIds implementation="java.lang.String" default-value="">${includeArtifactIds}</includeArtifactIds>
        <includeClassifiers implementation="java.lang.String" default-value="">${includeClassifiers}</includeClassifiers>
        <includeGroupIds implementation="java.lang.String" default-value="">${includeGroupIds}</includeGroupIds>
        <includeParents implementation="boolean" default-value="false">${includeParents}</includeParents>
        <includeScope implementation="java.lang.String" default-value="">${includeScope}</includeScope>
        <includeTypes implementation="java.lang.String" default-value="">${includeTypes}</includeTypes>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers">${markersDirectory}</markersDirectory>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputFile implementation="java.io.File">${outputFile}</outputFile>
        <outputScope implementation="boolean" default-value="true">${mdep.outputScope}</outputScope>
        <overWriteIfNewer implementation="boolean" default-value="true">${overWriteIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${overWriteSnapshots}</overWriteSnapshots>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <sort implementation="boolean" default-value="false">${sort}</sort>
        <type implementation="java.lang.String" default-value="">${type}</type>
      </configuration>
    </mojo>
    <mojo>
      <goal>resolve-plugins</goal>
      <description>Goal that resolves all project plugins and reports and their dependencies.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.apache.maven.plugins.dependency.resolvers.ResolvePluginsMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>appendOutput</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to append outputs into the output file or overwrite it.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classifier to look for. Example: sources</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupId Names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeReactor</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t resolve plugins that are in the current reactor.</description>
        </parameter>
        <parameter>
          <name>excludeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to exclude. An Empty string indicates no scopes (default).</description>
        </parameter>
        <parameter>
          <name>excludeTransitive</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should exclude transitive dependencies</description>
        </parameter>
        <parameter>
          <name>excludeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
        <parameter>
          <name>includeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupIds to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to include. An Empty string indicates all scopes (default). The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom. In summary:
-	runtime scope gives runtime and compile dependencies,
-	compile scope gives compile, provided, and system dependencies,
-	test (default) scope gives all dependencies,
-	provided scope just gives provided dependencies,
-	system scope just gives system dependencies.
</description>
        </parameter>
        <parameter>
          <name>includeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If specified, this parameter will cause the dependencies to be written to the path specified, instead of writing to the console.</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite artifacts that don&apos;t exist or are older than the source.</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend the groupId during copy.</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>type</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type to look for when constructing artifact based on classifier. Example: java-source,jar,war</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
      </parameters>
      <configuration>
        <appendOutput implementation="boolean" default-value="false">${appendOutput}</appendOutput>
        <classifier implementation="java.lang.String" default-value="">${classifier}</classifier>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeClassifiers implementation="java.lang.String" default-value="">${excludeClassifiers}</excludeClassifiers>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <excludeReactor implementation="boolean" default-value="true">${excludeReactor}</excludeReactor>
        <excludeScope implementation="java.lang.String" default-value="">${excludeScope}</excludeScope>
        <excludeTransitive implementation="boolean" default-value="false">${excludeTransitive}</excludeTransitive>
        <excludeTypes implementation="java.lang.String" default-value="">${excludeTypes}</excludeTypes>
        <includeArtifactIds implementation="java.lang.String" default-value="">${includeArtifactIds}</includeArtifactIds>
        <includeClassifiers implementation="java.lang.String" default-value="">${includeClassifiers}</includeClassifiers>
        <includeGroupIds implementation="java.lang.String" default-value="">${includeGroupIds}</includeGroupIds>
        <includeScope implementation="java.lang.String" default-value="">${includeScope}</includeScope>
        <includeTypes implementation="java.lang.String" default-value="">${includeTypes}</includeTypes>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers">${markersDirectory}</markersDirectory>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputFile implementation="java.io.File">${outputFile}</outputFile>
        <overWriteIfNewer implementation="boolean" default-value="true">${overWriteIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${overWriteSnapshots}</overWriteSnapshots>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <type implementation="java.lang.String" default-value="">${type}</type>
      </configuration>
    </mojo>
    <mojo>
      <goal>sources</goal>
      <description>Goal that resolves the project source dependencies from the repository.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.apache.maven.plugins.dependency.resolvers.ResolveDependencySourcesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0-alpha2</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>appendOutput</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to append outputs into the output file or overwrite it.</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classifier to look for. Example: sources</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupId Names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeReactor</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t resolve plugins that are in the current reactor.</description>
        </parameter>
        <parameter>
          <name>excludeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to exclude. An Empty string indicates no scopes (default).</description>
        </parameter>
        <parameter>
          <name>excludeTransitive</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should exclude transitive dependencies</description>
        </parameter>
        <parameter>
          <name>excludeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
        <parameter>
          <name>includeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupIds to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeParents</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include parent poms in the dependency resolution list.</description>
        </parameter>
        <parameter>
          <name>includeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to include. An Empty string indicates all scopes (default). The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom. In summary:
-	runtime scope gives runtime and compile dependencies,
-	compile scope gives compile, provided, and system dependencies,
-	test (default) scope gives all dependencies,
-	provided scope just gives provided dependencies,
-	system scope just gives system dependencies.
</description>
        </parameter>
        <parameter>
          <name>includeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If specified, this parameter will cause the dependencies to be written to the path specified, instead of writing to the console.</description>
        </parameter>
        <parameter>
          <name>outputScope</name>
          <type>boolean</type>
          <since>2.0-alpha-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should display the scope when resolving</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite artifacts that don&apos;t exist or are older than the source.</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend the groupId during copy.</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>sort</name>
          <type>boolean</type>
          <since>2.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sort the output list of resolved artifacts alphabetically. The default ordering matches the classpath order.</description>
        </parameter>
        <parameter>
          <name>type</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type to look for when constructing artifact based on classifier. Example: java-source,jar,war</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>not used in this goal</description>
        </parameter>
      </parameters>
      <configuration>
        <appendOutput implementation="boolean" default-value="false">${appendOutput}</appendOutput>
        <classifier implementation="java.lang.String" default-value="">${classifier}</classifier>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeClassifiers implementation="java.lang.String" default-value="">${excludeClassifiers}</excludeClassifiers>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <excludeReactor implementation="boolean" default-value="true">${excludeReactor}</excludeReactor>
        <excludeScope implementation="java.lang.String" default-value="">${excludeScope}</excludeScope>
        <excludeTransitive implementation="boolean" default-value="false">${excludeTransitive}</excludeTransitive>
        <excludeTypes implementation="java.lang.String" default-value="">${excludeTypes}</excludeTypes>
        <includeArtifactIds implementation="java.lang.String" default-value="">${includeArtifactIds}</includeArtifactIds>
        <includeClassifiers implementation="java.lang.String" default-value="">${includeClassifiers}</includeClassifiers>
        <includeGroupIds implementation="java.lang.String" default-value="">${includeGroupIds}</includeGroupIds>
        <includeParents implementation="boolean" default-value="false">${includeParents}</includeParents>
        <includeScope implementation="java.lang.String" default-value="">${includeScope}</includeScope>
        <includeTypes implementation="java.lang.String" default-value="">${includeTypes}</includeTypes>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers">${markersDirectory}</markersDirectory>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputFile implementation="java.io.File">${outputFile}</outputFile>
        <outputScope implementation="boolean" default-value="true">${mdep.outputScope}</outputScope>
        <overWriteIfNewer implementation="boolean" default-value="true">${overWriteIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${overWriteSnapshots}</overWriteSnapshots>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <sort implementation="boolean" default-value="false">${sort}</sort>
        <type implementation="java.lang.String" default-value="">${type}</type>
      </configuration>
    </mojo>
    <mojo>
      <goal>tree</goal>
      <description>Displays the dependency tree for this project. Multiple formats are supported: text (by default), but also DOT, graphml and TGF.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugins.dependency.tree.TreeMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.0-alpha-5</since>
      <requiresDependencyCollection>test</requiresDependencyCollection>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>appendOutput</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to append outputs into the output file or overwrite it.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String</type>
          <since>2.0-alpha-6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A comma-separated list of artifacts to filter from the serialized dependency tree, or null not to filter any artifacts from the dependency tree. The filter syntax is:
[groupId]:[artifactId]:[type]:[version]
where each pattern segment is optional and supports full and partial * wildcards. An empty pattern segment is treated as an implicit wildcard.
For example, org.apache.* will match all artifacts whose group id starts with org.apache., and :::*-SNAPSHOT will match all snapshot artifacts.
</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String</type>
          <since>2.0-alpha-6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A comma-separated list of artifacts to filter the serialized dependency tree by, or null not to filter the dependency tree. The filter syntax is:
[groupId]:[artifactId]:[type]:[version]
where each pattern segment is optional and supports full and partial * wildcards. An empty pattern segment is treated as an implicit wildcard.
For example, org.apache.* will match all artifacts whose group id starts with org.apache., and :::*-SNAPSHOT will match all snapshot artifacts.
</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.io.File</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>If specified, this parameter will cause the dependency tree to be written to the path specified, instead of writing to the console.</description>
        </parameter>
        <parameter>
          <name>outputType</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>If specified, this parameter will cause the dependency tree to be written using the specified format. Currently supported format are: text (default), dot, graphml and tgf. These additional formats can be plotted to image files.</description>
        </parameter>
        <parameter>
          <name>scope</name>
          <type>java.lang.String</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>The scope to filter by when resolving the dependency tree, or null to include dependencies from all scopes. Note that this feature does not currently work due to MSHARED-4</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>tokens</name>
          <type>java.lang.String</type>
          <since>2.0-alpha-6</since>
          <required>false</required>
          <editable>true</editable>
          <description>The token set name to use when outputting the dependency tree. Possible values are whitespace, standard or extended, which use whitespace, standard (ie ASCII) or extended character sets respectively.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>2.0-alpha-6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to include omitted nodes in the serialized dependency tree. Notice this feature actually uses Maven 2 algorithm and may give wrong results when used with Maven 3.</description>
        </parameter>
      </parameters>
      <configuration>
        <appendOutput implementation="boolean" default-value="false">${appendOutput}</appendOutput>
        <excludes implementation="java.lang.String">${excludes}</excludes>
        <includes implementation="java.lang.String">${includes}</includes>
        <outputFile implementation="java.io.File">${outputFile}</outputFile>
        <outputType implementation="java.lang.String" default-value="text">${outputType}</outputType>
        <scope implementation="java.lang.String">${scope}</scope>
        <skip implementation="boolean" default-value="false">${skip}</skip>
        <tokens implementation="java.lang.String" default-value="standard">${tokens}</tokens>
        <verbose implementation="boolean" default-value="false">${verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>unpack</goal>
      <description>Goal that retrieves a list of artifacts from the repository and unpacks them in a defined location.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-sources</phase>
      <implementation>org.apache.maven.plugins.dependency.fromConfiguration.UnpackMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>artifact</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The artifact to unpack from command line. A string of the form groupId:artifactId:version[:packaging[:classifier]]. Use artifactItems within the POM configuration.</description>
        </parameter>
        <parameter>
          <name>artifactItems</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of ArtifactItems to work on. (ArtifactItem contains groupId, artifactId, version, type, classifier, outputDirectory, destFileName, overWrite and encoding.) See Usage for details.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A comma separated list of file patterns to exclude when unpacking the artifact. i.e. **\/*.xml,**\/*.properties **/*.xml,**/*.properties NOTE: Excludes patterns override the includes. (component code = return isIncluded( name ) AND !isExcluded( name );)</description>
        </parameter>
        <parameter>
          <name>fileMappers</name>
          <type>org.codehaus.plexus.components.io.filemappers.FileMapper[]</type>
          <since>3.1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>FileMapper to be used for rewriting each target path, or null if no rewriting shall happen.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>ignore to set file permissions when unpacking a dependency</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String</type>
          <since>2.0-alpha-5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A comma separated list of file patterns to include when unpacking the artifact. i.e. **/*.xml,**/*.properties NOTE: Excludes patterns override the includes. (component code = return isIncluded( name ) AND !isExcluded( name );)</description>
        </parameter>
        <parameter>
          <name>localRepositoryDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Path to override default local repository during plugin&apos;s execution. To remove all downloaded artifacts as part of the build, set this value to a location under your project&apos;s target directory</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files after unpack</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Default output location used for mojo, unless overridden in ArtifactItem.</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite if newer</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
since 2.6 is on by default</description>
        </parameter>
      </parameters>
      <configuration>
        <artifact implementation="java.lang.String">${artifact}</artifact>
        <excludes implementation="java.lang.String">${mdep.unpack.excludes}</excludes>
        <fileMappers implementation="org.codehaus.plexus.components.io.filemappers.FileMapper[]">${mdep.unpack.filemappers}</fileMappers>
        <ignorePermissions implementation="boolean" default-value="false">${dependency.ignorePermissions}</ignorePermissions>
        <includes implementation="java.lang.String">${mdep.unpack.includes}</includes>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers"/>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency">${outputDirectory}</outputDirectory>
        <overWriteIfNewer implementation="boolean" default-value="true">${mdep.overIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${mdep.overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${mdep.overWriteSnapshots}</overWriteSnapshots>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <useJvmChmod implementation="boolean" default-value="true">${dependency.useJvmChmod}</useJvmChmod>
      </configuration>
    </mojo>
    <mojo>
      <goal>unpack-dependencies</goal>
      <description>Goal that unpacks the project dependencies from the repository to a defined location.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-sources</phase>
      <implementation>org.apache.maven.plugins.dependency.fromDependencies.UnpackDependenciesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classifier to look for. Example: sources</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>3.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding of artifacts.</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupId Names to exclude.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A comma separated list of file patterns to exclude when unpacking the artifact. i.e. **/*.xml,**/*.properties NOTE: Excludes patterns override the includes. (component code = return isIncluded( name ) AND !isExcluded( name );)</description>
        </parameter>
        <parameter>
          <name>excludeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to exclude. An Empty string indicates no scopes (default).</description>
        </parameter>
        <parameter>
          <name>excludeTransitive</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If we should exclude transitive dependencies</description>
        </parameter>
        <parameter>
          <name>excludeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to exclude. Empty String indicates don&apos;t exclude anything (default).</description>
        </parameter>
        <parameter>
          <name>failOnMissingClassifierArtifact</name>
          <type>boolean</type>
          <since>2.0-alpha-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>This only applies if the classifier parameter is used.</description>
        </parameter>
        <parameter>
          <name>fileMappers</name>
          <type>org.codehaus.plexus.components.io.filemappers.FileMapper[]</type>
          <since>3.1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>FileMappers to be used for rewriting each target path, or null if no rewriting shall happen.</description>
        </parameter>
        <parameter>
          <name>ignorePermissions</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>ignore to set file permissions when unpacking a dependency</description>
        </parameter>
        <parameter>
          <name>includeArtifactIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of Artifact names to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeClassifiers</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Classifiers to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includeGroupIds</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of GroupIds to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A comma separated list of file patterns to include when unpacking the artifact. i.e. **/*.xml,**/*.properties NOTE: Excludes patterns override the includes. (component code = return isIncluded( name ) AND !isExcluded( name );)</description>
        </parameter>
        <parameter>
          <name>includeScope</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Scope to include. An Empty string indicates all scopes (default). The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom. In summary:
-	runtime scope gives runtime and compile dependencies,
-	compile scope gives compile, provided, and system dependencies,
-	test (default) scope gives all dependencies,
-	provided scope just gives provided dependencies,
-	system scope just gives system dependencies.
</description>
        </parameter>
        <parameter>
          <name>includeTypes</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma Separated list of Types to include. Empty String indicates include everything (default).</description>
        </parameter>
        <parameter>
          <name>markersDirectory</name>
          <type>java.io.File</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Directory to store flag files</description>
        </parameter>
        <parameter>
          <name>outputAbsoluteArtifactFilename</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output absolute filename for resolved artifacts</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Output location.</description>
        </parameter>
        <parameter>
          <name>overWriteIfNewer</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite artifacts that don&apos;t exist or are older than the source.</description>
        </parameter>
        <parameter>
          <name>overWriteReleases</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite release artifacts</description>
        </parameter>
        <parameter>
          <name>overWriteSnapshots</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite snapshot artifacts</description>
        </parameter>
        <parameter>
          <name>prependGroupId</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Prepend the groupId during copy.</description>
        </parameter>
        <parameter>
          <name>silent</name>
          <type>boolean</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If the plugin should be silent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution completely.</description>
        </parameter>
        <parameter>
          <name>stripClassifier</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Strip artifact classifier during copy</description>
        </parameter>
        <parameter>
          <name>stripVersion</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Strip artifact version during copy</description>
        </parameter>
        <parameter>
          <name>type</name>
          <type>java.lang.String</type>
          <since>2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type to look for when constructing artifact based on classifier. Example: java-source,jar,war</description>
        </parameter>
        <parameter>
          <name>useJvmChmod</name>
          <type>boolean</type>
          <since>2.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>will use the jvm chmod, this is available for user and all level group level will be ignored
since 2.6 is on by default</description>
        </parameter>
        <parameter>
          <name>useRepositoryLayout</name>
          <type>boolean</type>
          <since>2.0-alpha-2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Place each artifact in the same directory layout as a default repository.

example:

  /outputDirectory/junit/junit/3.8.1/junit-3.8.1.jar
</description>
        </parameter>
        <parameter>
          <name>useSubDirectoryPerArtifact</name>
          <type>boolean</type>
          <since>2.0-alpha-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Place each file in a separate subdirectory. (example /outputDirectory/junit-3.8.1-jar)</description>
        </parameter>
        <parameter>
          <name>useSubDirectoryPerScope</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Place each type of file in a separate subdirectory. (example /outputDirectory/runtime /outputDirectory/provided etc)</description>
        </parameter>
        <parameter>
          <name>useSubDirectoryPerType</name>
          <type>boolean</type>
          <since>2.0-alpha-1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Place each type of file in a separate subdirectory. (example /outputDirectory/jars /outputDirectory/wars etc)</description>
        </parameter>
      </parameters>
      <configuration>
        <classifier implementation="java.lang.String" default-value="">${classifier}</classifier>
        <encoding implementation="java.lang.String">${mdep.unpack.encoding}</encoding>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeClassifiers implementation="java.lang.String" default-value="">${excludeClassifiers}</excludeClassifiers>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <excludes implementation="java.lang.String">${mdep.unpack.excludes}</excludes>
        <excludeScope implementation="java.lang.String" default-value="">${excludeScope}</excludeScope>
        <excludeTransitive implementation="boolean" default-value="false">${excludeTransitive}</excludeTransitive>
        <excludeTypes implementation="java.lang.String" default-value="">${excludeTypes}</excludeTypes>
        <failOnMissingClassifierArtifact implementation="boolean" default-value="false">${mdep.failOnMissingClassifierArtifact}</failOnMissingClassifierArtifact>
        <fileMappers implementation="org.codehaus.plexus.components.io.filemappers.FileMapper[]">${mdep.unpack.filemappers}</fileMappers>
        <ignorePermissions implementation="boolean" default-value="false">${dependency.ignorePermissions}</ignorePermissions>
        <includeArtifactIds implementation="java.lang.String" default-value="">${includeArtifactIds}</includeArtifactIds>
        <includeClassifiers implementation="java.lang.String" default-value="">${includeClassifiers}</includeClassifiers>
        <includeGroupIds implementation="java.lang.String" default-value="">${includeGroupIds}</includeGroupIds>
        <includes implementation="java.lang.String">${mdep.unpack.includes}</includes>
        <includeScope implementation="java.lang.String" default-value="">${includeScope}</includeScope>
        <includeTypes implementation="java.lang.String" default-value="">${includeTypes}</includeTypes>
        <markersDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency-maven-plugin-markers">${markersDirectory}</markersDirectory>
        <outputAbsoluteArtifactFilename implementation="boolean" default-value="false">${outputAbsoluteArtifactFilename}</outputAbsoluteArtifactFilename>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/dependency">${outputDirectory}</outputDirectory>
        <overWriteIfNewer implementation="boolean" default-value="true">${overWriteIfNewer}</overWriteIfNewer>
        <overWriteReleases implementation="boolean" default-value="false">${overWriteReleases}</overWriteReleases>
        <overWriteSnapshots implementation="boolean" default-value="false">${overWriteSnapshots}</overWriteSnapshots>
        <prependGroupId implementation="boolean" default-value="false">${mdep.prependGroupId}</prependGroupId>
        <silent implementation="boolean" default-value="false">${silent}</silent>
        <skip implementation="boolean" default-value="false">${mdep.skip}</skip>
        <stripClassifier implementation="boolean" default-value="false">${mdep.stripClassifier}</stripClassifier>
        <stripVersion implementation="boolean" default-value="false">${mdep.stripVersion}</stripVersion>
        <type implementation="java.lang.String" default-value="">${type}</type>
        <useJvmChmod implementation="boolean" default-value="true">${dependency.useJvmChmod}</useJvmChmod>
        <useRepositoryLayout implementation="boolean" default-value="false">${mdep.useRepositoryLayout}</useRepositoryLayout>
        <useSubDirectoryPerArtifact implementation="boolean" default-value="false">${mdep.useSubDirectoryPerArtifact}</useSubDirectoryPerArtifact>
        <useSubDirectoryPerScope implementation="boolean" default-value="false">${mdep.useSubDirectoryPerScope}</useSubDirectoryPerScope>
        <useSubDirectoryPerType implementation="boolean" default-value="false">${mdep.useSubDirectoryPerType}</useSubDirectoryPerType>
      </configuration>
    </mojo>
  </mojos>
</plugin>